# Generated by Django 4.1.2 on 2022-10-22 07:59

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('levels_full', models.CharField(choices=[('Легкий', 'Легкий'), ('Нормальный', 'Нормальный'), ('Сложный', 'Сложный')], max_length=25, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sessions_full', models.CharField(choices=[('1', 'Сессия 1'), ('2', 'Сессия 2'), ('3', 'Сессия 3'), ('4', 'Сессия 4'), ('5', 'Сессия 5'), ('6', 'Сессия 6'), ('7', 'Сессия 7'), ('8', 'Сессия 8'), ('9', 'Сессия 9'), ('10', 'Сессия 10')], max_length=25, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('money', models.IntegerField(default=0)),
                ('products_full', models.CharField(choices=[('Хлеб 30 руб', 'Хлеб 30 руб'), ('Гречневая крупа 3 кг 150 руб', 'Гречневая крупа 3 кг 150 руб '), ('Вода 20л 500 руб', 'Вода 20л 500 руб'), ('Курица 250 руб', 'Курица 250 руб'), ('Конфеты 300 руб', 'Конфеты 300 руб'), ('Шоколад 100 руб', 'Шоколад 100 руб'), ('Зимняя куртка 7000 руб', 'Зимняя куртка 7000 руб'), ('Коллекционные кроссовки Nike 15 000 руб', 'Коллекционные кроссовки Nike 15 000 руб'), ('Тёплые сапоги 3000 руб', 'Тёплые сапоги 3000 руб'), ('Новогодние носки 200 руб', 'Новогодние носки 200 руб'), ('Лекарства 1000 руб', 'Лекарства 1000 руб'), ('Тарелки 400 руб', 'Тарелки 400 руб'), ('Кружка с динозавром 500 руб', 'Кружка с динозавром 500 руб'), ('Очки Гучи 5000 руб', 'Очки Гучи 5000 руб'), ('Смарт часы 10000 руб', 'Смарт часы 10000 руб'), ('Сигареты 500 руб', 'Сигареты 500 руб'), ('Кольцо 2000 руб', 'Кольцо 2000 руб'), ('Золотая цепь 3000 руб', 'Золотая цепь 3000 руб')], max_length=100, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.level')),
                ('session_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.session')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
